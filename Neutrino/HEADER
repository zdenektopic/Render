public protocol UIContextProtocol : class {

    /// Retrieves the state for the key passed as argument.
    /// If no state is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIState* subclass.
    /// - parameter key: The unique key associated with this state.
    public func state<S>(_ type: S.Type, key: String) -> S where S : UIStateProtocol

    /// Retrieves the component for the key passed as argument.
    /// If no component is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter key: The unique key associated with this component.
    /// - parameter props: Configurations and callbacks passed down to the component.
    /// - parameter parent: Optional if the component is not the root node.
    public func component<S, P, C>(_ type: C.Type, key: String, props: P, parent: UIComponentProtocol?) -> C where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Creates a new volatile stateless component.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter props: Configurations and callbacks passed down to the component.
    /// - parameter parent: Optional if the component is not the root node.
    public func transientComponent<S, P, C>(_ type: C.Type, props: P, parent: UIComponentProtocol?) -> C where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Prevents any calls to 'setNeedRender' to trigger the component relayout.
    /// Useful when a manual manipulation of the view hierarchy is ongoing (e.g. interactable
    /// animation).
    public func suspendComponentRendering()

    /// Restore the normal 'setNeedRender' behaviour.
    public func resumeComponentRendering()

    /// Register a new delegate for this context.
    /// - note: Many delegates can be registered at the same time and the context hold only weak
    /// references to them.
    public func registerDelegate(_ delegate: UIContextDelegate)

    /// Remove a delegate for this context.
    public func unregister(_ delegate: UIContextDelegate)

    /// A root component registered this context just got rendered.
    /// - note: This is automatically called from *UIComponent* subclasses.
    public func didRenderRootComponent(_ component: UIComponentProtocol)

    /// The canvas view in which the component will be rendered in.
    weak public var canvasView: UIView? { get set }

    /// Returns the bounds of the canvas view.
    public var canvasSize: CGSize { get }

    /// *Optional* the property animator that is going to be used for frame changes in the component
    /// subtree.
    /// - note: This field is auotmatically reset to 'nil' at the end of every 'render' pass.
    public var layoutAnimator: UIViewPropertyAnimator? { get set }

    /// States and component object pool that guarantees uniqueness of 'UIState' and 'UIComponent'
    /// instances within the same context.
    public var pool: UIContextPool { get }

    /// Javascript bridge.
    public var jsBridge: JSBridge { get }

    /// Gets rid of the obsolete states.
    /// - parameter validKeys: The keys for the components currently rendered on screen.
    public func flushObsoleteStates(validKeys: Set<String>)

    public var _componentInitFromContext: Bool { get }

    public var _isRenderSuspended: Bool { get }

    /// *Internal only* Associate a parent context.
    weak public var _parentContext: UIContextProtocol? { get set }
}

public protocol UIContextDelegate : class {

    /// Called whenever *setNeedRender* is called on any of the compoenets belonging to this context.
    public func setNeedRenderInvoked(on context: UIContextProtocol, component: UIComponentProtocol)
}

public class UIContext : UIContextProtocol {

    /// States and component object pool that guarantees uniqueness of 'UIState' and 'UIComponent'
    /// instances within the same context.
    public let pool: RenderNeutrino.UIContextPool

    /// The canvas view in which the component will be rendered in.
    public weak var canvasView: UIView?

    /// Returns the bounds of the canvas view.
    public var canvasSize: CGSize { get }

    public var _componentInitFromContext: Bool

    /// *Internal only* Associate a parent context.
    public weak var _parentContext: UIContextProtocol?

    public private(set) var _isRenderSuspended: Bool

    /// *Optional* the property animator that is going to be used for frame changes in the component
    /// subtree.
    /// - note: This field is auotmatically reset to 'nil' at the end of every 'render' pass.
    public var layoutAnimator: UIViewPropertyAnimator?

    /// Javascript bridge.
    public lazy var jsBridge: JSBridge { get set }

    public init()

    /// Retrieves the state for the key passed as argument.
    /// If no state is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIState* subclass.
    /// - parameter key: The unique key associated with this state.
    public func state<S>(_ type: S.Type, key: String) -> S where S : UIStateProtocol

    /// Retrieves the component for the key passed as argument.
    /// If no component is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter key: The unique key associated with this component.
    /// - parameter props: Configurations and callbacks passed down to the component.
    /// - parameter parent: Optional if the component is not the root node.
    public func component<S, P, C>(_ type: C.Type, key: String, props: P = default, parent: UIComponentProtocol? = default) -> C where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Creates a new volatile stateless component.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter props: Configurations and callbacks passed down to the component.
    /// - parameter parent: Optional if the component is not the root node.
    public func transientComponent<S, P, C>(_ type: C.Type, props: P = default, parent: UIComponentProtocol? = default) -> C where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Prevents any calls to 'setNeedRender' to trigger the component relayout.
    /// Useful when a manual manipulation of the view hierarchy is ongoing (e.g. interactable
    /// animation).
    public func suspendComponentRendering()

    /// Restore the normal 'setNeedRender' behaviour.
    public func resumeComponentRendering()

    /// Many delegates can be registered at the same time and the context hold only weak
    /// references to them.
    public func registerDelegate(_ delegate: UIContextDelegate)

    /// Remove a delegate for this context.
    public func unregister(_ delegate: UIContextDelegate)

    /// Propagates the notification to all of the registered delegates.
    public func didRenderRootComponent(_ component: UIComponentProtocol)

    /// Gets rid of the obsolete states.
    public func flushObsoleteStates(validKeys: Set<String>)
}

public final class UIContextPool { 
}

public final class UIContextRegistrar {
}

public protocol UIComponentProtocol : UINodeDelegateProtocol {

    /// The component-tree context.
    weak public var context: UIContextProtocol? { get }

    /// A unique key for the component (necessary if the component is stateful).
    public var key: String? { get }

    /// The root node (built as a result of the 'render' method).
    public var root: UINodeProtocol { get }

    /// *Optional* node delegate.
    weak public var delegate: UINodeDelegateProtocol? { get set }

    /// The component parent (nil for root components).
    weak public var parent: UIComponentProtocol? { get }

    /// The view in which the component is going to be rendered.
    weak public var canvasView: UIView? { get }

    /// Canvas bounding rect.
    public var canvasSize: () -> CGSize { get set }

    /// Set the canvas view for this component.
    /// - parameter view: The view in which the component is going to be rendered.
    /// - parameter useBoundsAsCanvasSize: if 'true' the canvas size will return the view bounds.
    /// - parameter renderOnCanvasSizeChange: if 'true' the components will automatically
    /// trigger 'setNeedsRender' whenever the canvas view changes its bounds.
    public func setCanvas(view: UIView, options: [UIComponentCanvasOption])

    /// Mark the component for rendering.
    public func setNeedsRender(options: [UIComponentRenderOption])

    /// Trigger a render pass if the component was set dirty after 'suspendComponentRendering'
    /// has been invoked on the context.
    /// - note: In most scenarios you don't have to manually call this method - the context will
    /// automatically resume rendering on invalidated components when the suspension is terminated.
    public func resumeFromSuspendedRenderingIfNecessary()

    /// Type-erased state associated to this component.
    /// - note: *Internal only.*
    public var anyState: UIStateProtocol { get }

    /// Type-erased props associated to this component.
    /// - note: *Internal only.*
    public var anyProps: UIPropsProtocol { get }

    /// Builds the component node.
    /// - note: Use this function to insert the node as a child of a pre-existent node hierarchy.
    public func asNode() -> UINodeProtocol
}

public enum UIComponentCanvasOption : Int {

    case useBoundsAsCanvasSize

    /// Triggers 'setNeedsRender' whenever the canvas view changes its bounds.
    case renderOnCanvasSizeChange

    /// If the component can overflow in the horizontal axis.
    case flexibleWidth

    /// If the component can overflow in the vertical axis.
    case flexibleHeight

    /// Default canvas option.
    public static func defaults() -> [UIComponentCanvasOption]
}

public enum UIComponentRenderOption {

    /// Provide an animator that will transition the frame change caused by the new computed layout.
    case animateLayoutChanges(animator: UIViewPropertyAnimator)

    /// Useful whenever a component in an inner context (e.g. a component embedded in a cell)
    /// wants to trigger a re-render from the top down on the parent context.
    /// - note: Nested context are pretty rare and adopted for performance optimisation reasons only,
    /// like for example in *UITableComponent* or *UICollectionComponent*.
    /// Creating your own nested contexts is discouraged.
    case propagateToParentContext
}

/// Component baseclass.
open class UIComponent<S, P> : NSObject, UIComponentProtocol where S : UIStateProtocol, P : UIPropsProtocol {

    /// The root node (built as a result of the 'render' method).
    public var root: UINodeProtocol { get set }

    /// The component parent (nil for root components).
    public weak var parent: UIComponentProtocol?

    /// The state associated with this component.
    /// A state is always associated to a unique component key and it's a unique instance living
    /// in the context identity map.
    public var state: S { get set }

    /// Use props to pass data & event handlers down to your child components.
    public var props: P

    /// Type-erased props associated to this component.
    /// - note: *Internal only.*
    public var anyProps: UIPropsProtocol { get }

    /// Type-erased state associated to this component.
    /// - note: *Internal only.*
    public var anyState: UIStateProtocol { get }

    /// A unique key for the component (necessary if the component is stateful).
    public let key: String?

    /// Forwards node layout method callbacks.
    public weak var delegate: UINodeDelegateProtocol?

    /// The component-tree context.
    public weak var context: UIContextProtocol?

    /// The view in which the component is going to be rendered.
    public private(set) weak var canvasView: UIView? { get set }

    /// Canvas bounding rect.
    public var canvasSize: () -> CGSize

    /// Never construct your component directly but do it through the *UIContext* factory methods.
    required public init(context: UIContextProtocol, key: String? = default)

    /// Set the canvas view for this component.
    /// - parameter view: The view in which the component is going to be rendered.
    /// - parameter useBoundsAsCanvasSize: if 'true' the canvas size will return the view bounds.
    /// - parameter renderOnCanvasSizeChange: if 'true' the components will automatically
    /// trigger 'setNeedsRender' whenever the canvas view changes its bounds.
    public func setCanvas(view: UIView, options: [UIComponentCanvasOption] = default)

    /// Mark the component for rendering.
    public func setNeedsRender(options: [UIComponentRenderOption] = default)

    /// Trigger a render pass if the component was set dirty after 'suspendComponentRendering'
    /// has been invoked on the context.
    /// - note: In most scenarios you don't have to manually call this method - the context will
    /// automatically resume rendering on invalidated components when the suspension is terminated.
    public func resumeFromSuspendedRenderingIfNecessary()

    /// Returns the desired child key prefixed with the key of the father.
    public func childKey(_ postfix: String) -> String

    /// Builds the component node.
    /// - note: Use this function to insert the node as a child of a pre-existent node hierarchy.
    public func asNode() -> UINodeProtocol

    /// Retrieves the component from the context for the key passed as argument.
    /// If no component is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter key: The unique key ('nil' for a transient component).
    /// - parameter props: Configurations and callbacks passed down to the component.
    public func childComponent<S, P, C>(_ type: C.Type, key: String? = default, props: P = default) -> C where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Builds the node hierarchy for this component.
    /// The render() function should be pure, meaning that it does not modify component state,
    /// it returns the same result each time it’s invoked.
    /// - note: Subclasses *must* override this method.
    /// - parameter context: The component-tree context.
    open func render(context: UIContextProtocol) -> UINodeProtocol

    /// The backing view of *node* just got rendered and added to the view hierarchy.
    /// - parameter view: The view that just got installed in the view hierarchy.
    open func nodeDidMount(_ node: UINodeProtocol, view: UIView)

    /// The backing view of *node* is about to be layed out.
    /// - parameter view: The view that is about to be configured and layed out.
    open func nodeWillLayout(_ node: UINodeProtocol, view: UIView)

    /// The backing view of *node* just got layed out.
    /// - parameter view: The view that has just been configured and layed out.
    open func nodeDidLayout(_ node: UINodeProtocol, view: UIView)
}

/// A component without *props* nor *state*.
public typealias UIPureComponent = UIComponent<UINilState, UINilProps>

/// A component without any *state* but with *props* configured from the outside.
open class UIStatelessComponent<P> : UIComponent<UINilState, P> where P : UIPropsProtocol {
}

public protocol UIViewKeyPathProtocol {

    /// A unique identifier for the keyPath that is being assigned.
    public var keyPathIdentifier: Int { get }

    /// Apply the computed property value to the view.
    public func assign(view: UIView)

    /// Restore the property original value.
    public func restore(view: UIView)
}

public extension UINode where V : UIView {

    public final class UIViewKeyPathValue : UIViewKeyPathProtocol {

        /// A unique identifier for the keyPath being assigned.
        public let keyPathIdentifier: Int

        public convenience init<T>(keyPath: ReferenceWritableKeyPath<V, T>, value: T, animator: UIViewPropertyAnimator? = default)

        public convenience init<T>(keyPath: ReferenceWritableKeyPath<V, T>, value: T, animator: UIViewPropertyAnimator? = default) where T : Equatable

        /// Apply the computed property value to the view.
        public func assign(view: UIView)

        /// Restore the property original value.
        public func restore(view: UIView)
    }
}

extension AnyKeyPath {

    /// Returns a unique identifier for the keyPath.
    public var identifier: Int { get }
}

@objc public final class UIRenderConfigurationContainer : NSObject {

    /// The node that originated this view.
    public weak var node: UINodeProtocol?

    public weak var view: UIView?

    /// The initial value for the propeties that are currenly assigned.
    public let initialConfiguration: UIViewPropertyInitalContainer

    /// Whether the view has been created at the last render pass.
    public var isNewlyCreated: Bool

    /// The frame from the previous layout pass.
    public var oldFrame: CGRect

    /// The frame after the current layout pass.
    public var newFrame: CGRect

    /// The original alpha of the view.
    public var targetAlpha: CGFloat

}

@objc public final class UIViewPropertyInitalContainer : NSObject { 
}


public protocol UINodeDelegateProtocol : class {

    /// The backing view of *node* just got rendered and added to the view hierarchy.
    /// - parameter view: The view that just got installed in the view hierarchy.
    public func nodeDidMount(_ node: UINodeProtocol, view: UIView)

    /// The backing view of *node* is about to be layed out.
    /// - parameter view: The view that is about to be configured and layed out.
    public func nodeWillLayout(_ node: UINodeProtocol, view: UIView)

    /// The backing view of *node* just got layed out.
    /// - parameter view: The view that has just been configured and layed out.
    public func nodeDidLayout(_ node: UINodeProtocol, view: UIView)
}

public protocol UINodeProtocol : class {

    /// Backing view for this node.
    public var renderedView: UIView? { get }

    /// *Optional* delegate.
    weak public var delegate: UINodeDelegateProtocol? { get set }

    /// The parent node (if this is not the root node in the hierarchy).
    weak public var parent: UINodeProtocol? { get set }

    /// The component that manages this subtree (if applicable).
    weak public var associatedComponent: UIComponentProtocol? { get set }

    /// A unique key for the component/node (necessary if the component is stateful).
    public var key: String? { get set }

    /// The reuse identifier for this node is its hierarchy.
    /// Identifiers help Render understand which items have changed.
    /// A custom *reuseIdentifier* is mandatory if the node has a custom creation closure.
    public var reuseIdentifier: String { get set }

    /// The subnodes of this node.
    public var children: [UINodeProtocol] { get }

    /// An additional configuration closure meant to override some of the original configuration
    /// of the node.
    public var overrides: ((UIView) -> Void)? { get set }

    /// Re-applies the configuration closure for this node and compute its layout.
    public func layout(in bounds: CGSize, options: [UINodeOption])

    /// Mount the component in the view hierarchy by running the *reconciliation algorithm*.
    /// This means that only the required changes to the view hierarchy are going to be applied.
    public func reconcile(in view: UIView?, size: CGSize?, options: [UINodeOption])

    /// Returns the node with the key matching the function argument.
    public func nodeWithKey(_ key: String) -> UINodeProtocol?

    /// Components that builds components in non-traditional fashion (e.g. table/collection views)
    /// needs to keep track of their children by updating their root nodes 'unmanagedChildren'
    /// at every render pass.
    /// - note: *Internal use only*.
    public var unmanagedChildren: [UINodeProtocol] { get set }

    /// This component is the n-th children.
    /// - note: *Internal use only*.
    public var index: Int { get set }

    /// String representation of the underlying view type.
    /// - note: *Internal use only*.
    public var _debugType: String { get }

    /// String representation of the current state.
    /// - note: *Internal use only*.
    public var _debugStateDescription: String { get set }

    /// String representation of the current props.
    /// - note: *Internal use only*.
    public var _debugPropsDescription: String { get set }

    /// Asks the node to build the backing view for this node.
    /// - note: *Internal use only*.
    public func _constructView(with reusableView: UIView?)

    /// Configure the backing view of this node by running the configuration closure provided in the
    /// init method.
    /// - note: *Internal use only*.
    public func _setup(in bounds: CGSize, options: [UINodeOption])

    /// Returns all of the keys found in this subtree.
    public func _retrieveKeysRecursively() -> Set<String>
}

public class UINode<V> : UINodeProtocol where V : UIView {

    public struct UIViewConfiguration {

        public func set<T>(_ keyPath: ReferenceWritableKeyPath<V, T>, _ value: T, animator: UIViewPropertyAnimator? = default)
    }

    public typealias UINodeCreationClosure = () -> V

    public typealias UINodeConfigurationClosure = (UIViewConfiguration) -> Void

    public typealias UINodeChildrenCreationClosure = (UIViewConfiguration) -> [UINodeProtocol]

    /// The reuse identifier for this node is its hierarchy.
    /// Identifiers help Render understand which items have changed.
    /// A custom *reuseIdentifier* is mandatory if the node has a custom creation closure.
    public var reuseIdentifier: String

    /// Backing view for this node.
    public fileprivate(set) var renderedView: UIView?

    /// The subnodes of this node.
    public fileprivate(set) var children: [UINodeProtocol]

    /// String representation of the underlying view type.
    /// - note: *Internal use only*.
    public var _debugType: String

    /// String representation of the current state.
    /// - note: *Internal use only*.
    public var _debugStateDescription: String

    /// String representation of the current props.
    /// - note: *Internal use only*.
    public var _debugPropsDescription: String

    /// *Optional* delegate.
    public weak var delegate: UINodeDelegateProtocol?

    /// The parent node (if this is not the root node in the hierarchy).
    public weak var parent: UINodeProtocol?

    /// The component that manages this subtree (if applicable).
    public weak var associatedComponent: UIComponentProtocol?

    /// A unique key for the component/node (necessary if the component is stateful).
    public var key: String?

    /// This component is the n-th children.
    /// - note: *Internal use only*.
    public var index: Int

    /// Components that builds components in non-traditional fashion (e.g. table/collection views)
    /// needs to keep track of their children by updating their root nodes 'unmanagedChildren'
    /// at every render pass.
    /// - note: *Internal use only*.
    public var unmanagedChildren: [UINodeProtocol]

    /// An additional configuration closure meant to override some of the original configuration
    /// of the node.
    public var overrides: ((UIView) -> Void)?

    /// Creates a new immutable UI description node.
    /// - parameter reuseIdentifier: Mandatory if the node has a custom creation closure.
    /// - parameter key: A unique key for the node (necessary if the component is stateful).
    /// - parameter create: Custom view initialization closure.
    /// - parameter configure: This closure is invoked whenever the 'layout' method is invoked.
    /// Configure your backing view by using the *UILayout* object (e.g.):
    /// ```
    /// ... { layout in
    ///   layout.set(\UIView.backgroundColor, value: .green)
    ///   layout.set(\UIView.layer.borderWidth, value: 1)
    /// ```
    /// You can also access to the view directly (this is less performant because the infrastructure
    /// can't keep tracks of these view changes, but necessary when coping with more complex view
    /// configuration methods).
    /// ```
    /// ... { layout in
    ///   layout.view.backgroundColor = .green
    ///   layout.view.setTitle("FOO", for: .normal)
    /// ```
    public init(reuseIdentifier: String? = default, key: String? = default, create: (() -> V)? = default, configure: UINodeConfigurationClosure? = default)

    open func configure(_ configClosure: @escaping UINodeConfigurationClosure)

    /// Sets the subnodes of this node.
    /// - note: Instances of *UINilNode* are excluded from the node hierarchy.
    public func children(_ nodes: [UINodeProtocol]) -> Self

    /// Configure the backing view of this node by running the configuration closure provided in the
    /// init method.
    /// - note: *Internal use only*.
    public func _setup(in bounds: CGSize, options: [UINodeOption])

    /// Re-applies the configuration for the node and compute its layout.
    public func layout(in bounds: CGSize, options: [UINodeOption] = default)

    /// Asks the node to build the backing view for this node.
    public func _constructView(with reusableView: UIView? = default)

    /// Finding the minimal number of modifications between two arbitrary trees is a *O(n^3)* problem.
    /// This isn’t tractable for our use case. Render uses a simple and yet powerful heuristics
    /// to find a very good approximation in *O(n)*.
    /// It only tries to reconcile trees level by level. This drastically reduces the complexity
    /// and isn’t a big loss as it is very rare in applications to have a component being moved
    /// to a different level in the tree.
    public func reconcile(in view: UIView? = default, size: CGSize? = default, options: [UINodeOption] = default)

    /// Binds the rendered view to a property in the target object.
    /// - parameter target: The target object for the binding.
    /// - parameter keyPath: The property path in the target object.
    /// - note: Declare the property in your target as *weak* in order to prevent retain ciclyes.
    public func bindView<O, V>(target: O, keyPath: ReferenceWritableKeyPath<O, V>) where O : AnyObject

    /// Returns the node with the key matching the function argument.
    public func nodeWithKey(_ key: String) -> UINodeProtocol?

    /// Returns all of the keys found in this subtree.
    public func _retrieveKeysRecursively() -> Set<String>
}
/// Make a reuse identifier string given a type and a custom marker.
public func UINodeReuseIdentifierMake<V>(type: V.Type, identifier: String? = default) -> String

/// Represent an empty node.
/// - note: Use this when you want to return an empty child in some conditions.
public class UINilNode : UINode<UIView> {

    public override var reuseIdentifier: String { get set }
}

public enum UINodeOption : Int {

    /// Prevent the delegate to be notified at this layout pass.
    case preventDelegateCallbacks
}

/// Props (short for properties) are a Component's configuration. They are received from above and
/// immutable as far as the Component receiving them is concerned.
/// A Component cannot change its props, but it is responsible for putting together the props of
/// its child Components.
/// Props do not have to just be data -- callback functions may be passed in as props.
public protocol UIPropsProtocol : ReflectedStringConvertible {

    public init()
}

public class UINilProps : UIPropsProtocol, Codable {

    public static let `nil`: RenderNeutrino.UINilProps

    public required init()
}

/// The state is a data structure that starts with a default value when a Component mounts.
/// It may be mutated across time, mostly as a result of user events.
/// A Component manages its own state internally.
/// Besides setting an initial state, it has no business fiddling with the state of its children.
/// You might conceptualize state as private to that component.
public protocol UIStateProtocol :  class, ReflectedStringConvertible {

    /// Returns the initial state for this current state type.
    public init()
}

public final class UINilState : UIStateProtocol, Codable {

    /// Returns the initial state for this current state type.
    public init()
}

open class UIState : UIStateProtocol {

    /// Returns the initial state for this current state type.
    public required init()
}

public protocol ReflectedStringConvertible : CustomStringConvertible {
}

extension ReflectedStringConvertible {

    /// A textual description of the object.
    public var description: String { get }
}


public extension UIView {

    /// *Internal only* some of render transient configuration for this view.
    public var renderContext: UIRenderConfigurationContainer { get set }

    /// Whether this view has a node currently associated to it or not.
    public var hasNode: Bool { get set }

    /// Remove all of the registered targets if this view is a subclass of *UIControl*.
    public func resetAllTargets()
}

public extension CGFloat {

    /// Used for flexible dimensions (*Yoga specific value*).
    public static let undefined: CGFloat

    /// An arbitrary large number to use for non-constrained layout.
    public static let max: CGFloat

    /// The positive difference between 1.0 and the next greater representable number.
    public static let epsilon: CGFloat

    /// Returns *0* if the number is NaN of inf.
    public var normal: CGFloat { get }
}

public extension CGSize {

    /// Used for flexible dimensions (*Yoga specific value*).
    public static let undefined: CGSize

    /// An arbitrary large number to use for non-constrained layout.
    public static let max: CGSize

    /// The positive difference between 1.0 and the next greater representable number.
    public static let epsilon: CGSize

    /// CGSize equatable implementation.
    public static func ===(lhs: CGSize, rhs: CGSize) -> Bool
}

public extension CGRect {

    /// Returns *0* if the number is NaN of inf.
    public mutating func normalize()
}

public class UITableComponentProps : UIPropsProtocol {

    /// Represents a table view section.
    public struct Section {

        /// The list of components that are going to be shown in this section.
        public var cells: [UICell]

        /// A node able to render this section header.
        /// - note: Optional.
        public var header: UISectionHeader?

        /// 'true' if all of the root nodes in this section have a unique key.
        public var hasDistinctKeys: Bool { get }

        public init(cells: [UICell], header: UISectionHeader? = default)
    }

    /// The sections that will be presented by this table view instance.
    public var sections: [Section]

    /// The table view header component.
    public var header: UIComponentProtocol?

    /// 'true' if all of the root nodes, in all of the sections have a unique key.
    public var hasDistinctKeys: Bool { get }

    /// Returns all of the components across the different sections.
    public var allComponents: [UIComponentProtocol] { get }

    public typealias UITableNodeConfigurationClosure = UINode<UITableView>.UINodeConfigurationClosure

    /// *UITableView* configuration closure.
    /// - note: Use this to configure layout properties such as padding, margin and such.
    public var configuration: UITableNodeConfigurationClosure

    public required init()

    public convenience init(sections: [Section], configure: UITableNodeConfigurationClosure? = default)

    public convenience init(cells: [UICell], header: UISectionHeader? = default, configure: UITableNodeConfigurationClosure? = default)
}
public typealias UIDefaultTableComponent = UITableComponent<UINilState, UITableComponentProps>

/// Wraps a *UITableView* into a Render component.
public class UITableComponent<S, P> : UIComponent<S, P>, UIContextDelegate, UITableViewDataSource, UITableViewDelegate where S : UIStateProtocol, P : RenderNeutrino.UITableComponentProps {

    public required init(context: UIContextProtocol, key: String?)

    public override func render(context: UIContextProtocol) -> UINodeProtocol

    /// Called whenever *setNeedRender* is called on any of the compoenets belonging to this context.
    public func setNeedRenderInvoked(on context: UIContextProtocol, component: UIComponentProtocol)

    /// Asks the data source to return the number of sections in the table view.
    public func numberOfSections(in tableView: UITableView) -> Int

    /// Tells the data source to return the number of rows in a given section of a table view.
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int

    /// Asks the data source for a cell to insert in a particular location of the table view.
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell

    /// Asks the delegate for the height to use for a row in a specified location.
    public func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat

    /// Asks the delegate for a view object to display in the header of the specified section of
    /// the table view.
    public func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?

    /// Asks the delegate for the height to use for the header of a particular section.
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat

    /// Retrieves the component from the context for the key passed as argument.
    /// If no component is registered yet, a new one will be allocated and returned.
    /// - parameter type: The desired *UIComponent* subclass.
    /// - parameter key: The unique key ('nil' for a transient component).
    /// - parameter props: Configurations and callbacks passed down to the component.
    public func cell<S, P, C>(_ type: C.Type, key: String? = default, props: P = default) -> UICell where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>

    /// Retieves a component that is suitable as a table header.
    public func header<S, P, C>(_ type: C.Type, key: String? = default, props: P = default) -> UISectionHeader where S : UIStateProtocol, P : UIPropsProtocol, C : RenderNeutrino.UIComponent<S, P>
}

public final class UICell {

    /// The constructed component.
    public let component: UIComponentProtocol
}
public typealias UISectionHeader = UICell

/// Components that are embedded in cells have a different context.
public final class UICellContext : UIContext {

    /// Layout animator is not available for cells.
    public override var layoutAnimator: UIViewPropertyAnimator? { get set }

    public override func flushObsoleteStates(validKeys: Set<String>)
}

extension UIComponent where S : UIStateProtocol, P : UIPropsProtocol {
}

public class UITableComponentCell : UITableViewCell {

    /// The node currently associated to this view.
    public var component: UIComponentProtocol?

    public override init(style: UITableViewCellStyle, reuseIdentifier: String?)

    public required init?(coder aDecoder: NSCoder)

    public func mount(component: UIComponentProtocol, width: CGFloat)

    /// Asks the view to calculate and return the size that best fits the specified size.
    public override func sizeThatFits(_ size: CGSize) -> CGSize
}
